{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport Nav from '../components/Nav.vue';\nimport axios from 'axios';\nimport { ref, onMounted, watch } from 'vue';\nimport { baseURL } from '../stores/counter';\nexport default {\n  __name: 'CountriesView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const selected = ref('');\n    const countriesList = ref([]);\n    const latitude = ref(null);\n    const longitude = ref(null);\n    const header = {\n      'Content-Type': 'application/json'\n    };\n    let map;\n    let marker;\n    const countries = async () => (await axios.get('https://restcountries.com/v3.1/all')).data;\n    const setMap = (lat, long, zoom = 11) => {\n      if (!map) {\n        map = L.map('map').setView([lat, long], zoom);\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          maxZoom: 19,\n          attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n        }).addTo(map);\n      } else {\n        map.setView([lat, long], zoom);\n      }\n      if (!marker) {\n        marker = L.marker([lat, long]).addTo(map);\n      } else {\n        marker.setLatLng([lat, long]);\n      }\n    };\n    const addToWatchList = async country => {\n      const res = await axios.get(baseURL + 'countries');\n      let id;\n      if (res.data.length == 0) {\n        id = 0;\n      } else {\n        const lastID = res.data.at(-1).id;\n        id = lastID + 1;\n      }\n      const data = {\n        id,\n        country: {\n          name: country.name.official,\n          cca3: country.cca3,\n          independent: country.independent,\n          currencies: country.currencies.name,\n          region: country.region,\n          capital: country.capital,\n          languages: country.languages,\n          latlng: country.capitalInfo.latlng,\n          flag: country.flags.png,\n          flagAlike: country.flag\n        }\n      };\n      let exist;\n      for (const k in res.data) {\n        if (res.data[k].country.name == country.name.official) exist = true;\n      }\n      if (!exist) await axios.post(baseURL + 'countries', data, header);else return;\n    };\n    onMounted(async () => {\n      for (const i of await countries()) {\n        countriesList.value.push(i);\n      }\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          latitude.value = position.coords.latitude;\n          longitude.value = position.coords.longitude;\n          setMap(latitude.value, longitude.value);\n          watch(selected, (newValue, oldValue) => {\n            if (newValue !== oldValue) {\n              latitude.value = selected.value.capitalInfo.latlng[0];\n              longitude.value = selected.value.capitalInfo.latlng[1];\n              setMap(latitude.value, longitude.value);\n            }\n          });\n        });\n      }\n    });\n    const __returned__ = {\n      selected,\n      countriesList,\n      latitude,\n      longitude,\n      header,\n      get map() {\n        return map;\n      },\n      set map(v) {\n        map = v;\n      },\n      get marker() {\n        return marker;\n      },\n      set marker(v) {\n        marker = v;\n      },\n      countries,\n      setMap,\n      addToWatchList,\n      Nav,\n      get axios() {\n        return axios;\n      },\n      ref,\n      onMounted,\n      watch,\n      get baseURL() {\n        return baseURL;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["Nav","axios","ref","onMounted","watch","baseURL","selected","countriesList","latitude","longitude","header","map","marker","countries","get","data","setMap","lat","long","zoom","L","setView","tileLayer","maxZoom","attribution","addTo","setLatLng","addToWatchList","country","res","id","length","lastID","at","name","official","cca3","independent","currencies","region","capital","languages","latlng","capitalInfo","flag","flags","png","flagAlike","exist","k","post","i","value","push","navigator","geolocation","getCurrentPosition","position","coords","newValue","oldValue"],"sources":["/Users/borsodiadam/Documents/DestinationTrackerVueTs/destination-tracker/src/views/CountriesView.vue"],"sourcesContent":["<template>\n   <Nav />\n   <div class=\"map\" id=\"map\"></div>\n   <div class=\"d-flex justify-content-center\">\n      <select name=\"countries\" v-model=\"selected\">\n         <option value=\"Select one\">Select one</option>\n         <option :value=\"country\" v-for=\"(country, i) in countriesList\" :key=\"i\">{{ country.name.official }}</option>\n      </select>\n   </div>\n   <div class=\"container\" v-if=\"selected\">\n      <div class=\"left\" :style=\"{ backgroundImage: 'url(' + selected.flags.png + ')' }\"></div>\n      <div class=\"right\">\n         <div class=\"name\">Official name: {{ selected.name.official }}</div>\n         <div class=\"d-flex flex-row\">\n            Currencies:\n            <div class=\"currencies\" v-for=\"(currency, i) in selected.currencies\" :key=\"i\">&nbsp;{{ currency.name }} ,</div>\n         </div>\n         <div class=\"capital\" v-for=\"(capital, i) in selected.capital\" :key=\"i\">Capital: {{ capital }}</div>\n         <div class=\"region\">Region: {{ selected.region }}</div>\n         <div class=\"d-flex flex-row\">\n            Languages:\n            <div class=\"languages\" v-for=\"(language, i) in selected.languages\" :key=\"i\">&nbsp;{{ language }},</div>\n         </div>\n      </div>\n      <button class=\"btn\" @click=\"addToWatchList(selected)\">Add to My Watchlist</button>\n   </div>\n</template>\n<script setup>\n   import Nav from '../components/Nav.vue';\n   import axios from 'axios';\n   import { ref, onMounted, watch } from 'vue';\n   import { baseURL } from '../stores/counter';\n\n   const selected = ref('');\n   const countriesList = ref([]);\n   const latitude = ref(null);\n   const longitude = ref(null);\n\n   const header = {\n      'Content-Type': 'application/json',\n   };\n\n   let map;\n   let marker;\n\n   const countries = async () => (await axios.get('https://restcountries.com/v3.1/all')).data;\n\n   const setMap = (lat, long, zoom = 11) => {\n      if (!map) {\n         map = L.map('map').setView([lat, long], zoom);\n         L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n         }).addTo(map);\n      } else {\n         map.setView([lat, long], zoom);\n      }\n      if (!marker) {\n         marker = L.marker([lat, long]).addTo(map);\n      } else {\n         marker.setLatLng([lat, long]);\n      }\n   };\n\n   const addToWatchList = async country => {\n      const res = await axios.get(baseURL + 'countries');\n      let id;\n\n      if (res.data.length == 0) {\n         id = 0;\n      } else {\n         const lastID = res.data.at(-1).id;\n         id = lastID + 1;\n      }\n\n      const data = {\n         id,\n         country: {\n            name: country.name.official,\n            cca3: country.cca3,\n            independent: country.independent,\n            currencies: country.currencies.name,\n            region: country.region,\n            capital: country.capital,\n            languages: country.languages,\n            latlng: country.capitalInfo.latlng,\n            flag: country.flags.png,\n            flagAlike: country.flag,\n         },\n      };\n\n      let exist;\n      for (const k in res.data) {\n         if (res.data[k].country.name == country.name.official) exist = true;\n      }\n      if (!exist) await axios.post(baseURL + 'countries', data, header);\n      else return;\n   };\n\n   onMounted(async () => {\n      for (const i of await countries()) {\n         countriesList.value.push(i);\n      }\n      if (navigator.geolocation) {\n         navigator.geolocation.getCurrentPosition(position => {\n            latitude.value = position.coords.latitude;\n            longitude.value = position.coords.longitude;\n            setMap(latitude.value, longitude.value);\n\n            watch(selected, (newValue, oldValue) => {\n               if (newValue !== oldValue) {\n                  latitude.value = selected.value.capitalInfo.latlng[0];\n                  longitude.value = selected.value.capitalInfo.latlng[1];\n                  setMap(latitude.value, longitude.value);\n               }\n            });\n         });\n      }\n   });\n</script>\n<style>\n   .container {\n      display: flex;\n      gap: 2rem;\n      align-items: center;\n      justify-content: center;\n      margin-top: 30px;\n   }\n   .left {\n      width: 500px;\n      height: 250px;\n      background-repeat: no-repeat;\n      background-size: cover;\n   }\n   .right {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      gap: 25px;\n   }\n   .map {\n      margin: 0 auto;\n      width: 80vw;\n      height: 60vh;\n   }\n   .select {\n      margin-top: 10px;\n   }\n   .btn {\n      border: 1px solid black;\n   }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}